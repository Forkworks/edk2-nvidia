/** @file
*
*  NVIDIA Config formset.
*
*  SPDX-FileCopyrightText: Copyright (c) 2020-2023, NVIDIA CORPORATION & AFFILIATES. All rights reserved.
*  Copyright (c) 2017, Linaro, Ltd. All rights reserved.
*
*  SPDX-License-Identifier: BSD-2-Clause-Patent
*
**/

#include <Uefi/UefiMultiPhase.h>
#include "NvidiaConfigHii.h"

formset
  guid      = NVIDIA_CONFIG_FORMSET_GUID,
  title     = STRING_TOKEN(STR_NVIDIA_CONFIG_TITLE),
  help      = STRING_TOKEN(STR_NVIDIA_CONFIG_HELP),

  varstore NVIDIA_CONFIG_HII_CONTROL,
    varid = NVIDIA_CONFIG_HII_CONTROL_ID,
    name = NVIDIA_CONFIG_HII_CONTROL,
    guid = NVIDIA_CONFIG_FORMSET_GUID;

  efivarstore NvidiaPcieEnableVariable,
    attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_NON_VOLATILE,  // EFI variable attributes
    name  = EnablePcieInOS,
    guid  = NVIDIA_TOKEN_SPACE_GUID;

  efivarstore NvidiaPcieResourceConfiguration,
    attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS,  // EFI variable attributes
    name  = PCIeResourceConfig,
    guid  = NVIDIA_TOKEN_SPACE_GUID;

  efivarstore NvidiaPcieEnableInOsConfiguration,
    attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS,  // EFI variable attributes
    name  = PCIeInOsConfig,
    guid  = NVIDIA_TOKEN_SPACE_GUID;

  efivarstore NVIDIA_QUICK_BOOT_ENABLED,
    attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_NON_VOLATILE,  // EFI variable attributes
    name  = QuickBootEnabled,
    guid  = NVIDIA_PUBLIC_VARIABLE_GUID;

  efivarstore NVIDIA_NEW_DEVICE_HIERARCHY,
    attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_NON_VOLATILE | EFI_VARIABLE_RUNTIME_ACCESS,  // EFI variable attributes
    name  = NewDeviceHierarchy,
    guid  = NVIDIA_PUBLIC_VARIABLE_GUID;

  efivarstore NVIDIA_SERIAL_TYPE_CONFIG,
    attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS,  // EFI variable attributes
    name  = SerialTypeConfig,
    guid  = NVIDIA_TOKEN_SPACE_GUID;

  efivarstore NVIDIA_SERIAL_PORT_CONFIG,
    attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_NON_VOLATILE,  // EFI variable attributes
    name  = SerialPortConfig,
    guid  = NVIDIA_TOKEN_SPACE_GUID;

  efivarstore NVIDIA_KERNEL_COMMAND_LINE,
    attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_NON_VOLATILE,  // EFI variable attributes
    name  = KernelCommandLine,
    guid  = NVIDIA_PUBLIC_VARIABLE_GUID;

  efivarstore NVIDIA_OS_STATUS_A,
    attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_NON_VOLATILE | EFI_VARIABLE_RUNTIME_ACCESS,  // EFI variable attributes
    name  = RootfsStatusSlotA,
    guid  = NVIDIA_PUBLIC_VARIABLE_GUID;

  efivarstore NVIDIA_OS_STATUS_B,
    attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_NON_VOLATILE | EFI_VARIABLE_RUNTIME_ACCESS,  // EFI variable attributes
    name  = RootfsStatusSlotB,
    guid  = NVIDIA_PUBLIC_VARIABLE_GUID;

  efivarstore NVIDIA_L4T_BOOT_MODE,
    attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_NON_VOLATILE | EFI_VARIABLE_RUNTIME_ACCESS,  // EFI variable attributes
    name  = L4TDefaultBootMode,
    guid  = NVIDIA_PUBLIC_VARIABLE_GUID;

  efivarstore NVIDIA_DGPU_DT_EFIFB_SUPPORT,
    attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_NON_VOLATILE | EFI_VARIABLE_RUNTIME_ACCESS,  // EFI variable attributes
    name  = DgpuDtEfifbSupport,
    guid  = NVIDIA_PUBLIC_VARIABLE_GUID;

  efivarstore NVIDIA_MEMORY_TEST_OPTIONS,
    attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_NON_VOLATILE | EFI_VARIABLE_RUNTIME_ACCESS,  // EFI variable attributes
    name = MemoryTestControl,
    guid = NVIDIA_PUBLIC_VARIABLE_GUID;

  //
  // Main form for NVIDIA Configuration
  //
  form formid = NVIDIA_CONFIG_FORM_ID,
    title = STRING_TOKEN(STR_NVIDIA_CONFIG_TITLE);

    subtitle text = STRING_TOKEN(STR_NULL);

    oneof varid = SerialPortConfig.Configuration,
        questionid = KEY_SERIAL_PORT_CONFIG,
        prompt = STRING_TOKEN(STR_SERIAL_PORT_CONFIG_PROMPT),
        help   = STRING_TOKEN(STR_SERIAL_PORT_CONFIG_HELP),
        flags  = INTERACTIVE | NUMERIC_SIZE_1 | RESET_REQUIRED,
        option text = STRING_TOKEN(STR_SP_DISABLED), value = NVIDIA_SERIAL_PORT_DISABLED, flags = 0;
        suppressif NOT ideqval NVIDIA_SERIAL_TYPE_CONFIG.Type == NVIDIA_SERIAL_PORT_TYPE_16550;
            option text = STRING_TOKEN(STR_SP_ENABLED_SPCR_FULL_16550), value = NVIDIA_SERIAL_PORT_SPCR_FULL_16550, flags = 0;
            option text = STRING_TOKEN(STR_SP_ENABLED_SPCR_NVIDIA_16550), value = NVIDIA_SERIAL_PORT_SPCR_NVIDIA_16550, flags = 0;
            option text = STRING_TOKEN(STR_SP_ENABLED_DBG2_NVIDIA_16550), value = NVIDIA_SERIAL_PORT_DBG2_NVIDIA_16550, flags = 0;
        endif;
        suppressif NOT ideqval NVIDIA_SERIAL_TYPE_CONFIG.Type == NVIDIA_SERIAL_PORT_TYPE_SBSA;
            option text = STRING_TOKEN(STR_SP_ENABLED_SPCR_SBSA), value = NVIDIA_SERIAL_PORT_SPCR_SBSA, flags = 0;
            option text = STRING_TOKEN(STR_SP_ENABLED_DBG2_SBSA), value = NVIDIA_SERIAL_PORT_DBG2_SBSA, flags = 0;
        endif;
    endoneof;
    //
    // Display Enable PCIe in OS
    //
    suppressif ideqval PCIeResourceConfig.ConfigEnabled == 0;
    goto PCIE_CONFIGURATION_FORM_ID,
        prompt = STRING_TOKEN(STR_PCIE_CONFIG_FORM_TITLE),
        help   = STRING_TOKEN(STR_PCIE_CONFIG_FORM_HELP),
        flags  = INTERACTIVE,
        key    = KEY_ENABLE_PCIE_CONFIG;
    endif;

    suppressif ideqval NVIDIA_CONFIG_HII_CONTROL.L4TSupported == 0;
    goto L4T_CONFIGURATION_FORM_ID,
        prompt = STRING_TOKEN(STR_L4T_CONFIG_FORM_TITLE),
        help   = STRING_TOKEN(STR_L4T_CONFIG_FORM_HELP),
        flags  = INTERACTIVE,
        key    = KEY_L4T_CONFIG;
    endif;

    goto BOOT_CONFIGURATION_FORM_ID,
        prompt = STRING_TOKEN(STR_BOOT_CONFIG_FORM_TITLE),
        help   = STRING_TOKEN(STR_BOOT_CONFIG_FORM_HELP),
        flags  = INTERACTIVE,
        key    = KEY_BOOT_CONFIG;

    goto MEMORY_TEST_FORM_ID,
        prompt = STRING_TOKEN(STR_MEMORY_TEST_FORM_TITLE),
        help   = STRING_TOKEN(STR_MEMORY_TEST_FORM_HELP),
        flags  = INTERACTIVE,
        key    = KEY_MEMORY_TEST;

    text
      help   = STRING_TOKEN(STR_RESET_VARIABLES_HELP),
      text   = STRING_TOKEN(STR_RESET_VARIABLES_PROMPT),
      flags  = INTERACTIVE | RESET_REQUIRED,
      key    = KEY_RESET_VARIABLES;
    //
    // TODO... for more form ids
    //
  endform;
  //
  // Form for Enable PCIe in OS
  //
  form formid = BOOT_CONFIGURATION_FORM_ID,
    title = STRING_TOKEN(STR_BOOT_CONFIG_FORM_TITLE);

    subtitle text = STRING_TOKEN(STR_NULL);

    oneof varid = QuickBootEnabled.Enabled,
        questionid = KEY_ENABLE_QUICK_BOOT,
        prompt = STRING_TOKEN(STR_QUICK_BOOT_ENABLED_PROMPT),
        help   = STRING_TOKEN(STR_QUICK_BOOT_ENABLED_HELP),
        flags  = INTERACTIVE | NUMERIC_SIZE_1 | RESET_REQUIRED,
        option text = STRING_TOKEN(STR_DISABLED), value = QUICK_BOOT_DISABLE, flags = 0;
        option text = STRING_TOKEN(STR_ENABLED),  value = QUICK_BOOT_ENABLE, flags = 0;
    endoneof;

    oneof varid = NewDeviceHierarchy.Hierarchy,
        questionid = KEY_NEW_DEVICE_HIERARCHY,
        prompt = STRING_TOKEN(STR_NEW_DEVICE_HIERARCHY_PROMPT),
        help   = STRING_TOKEN(STR_NEW_DEVICE_HIERARCHY_HELP),
        flags  = INTERACTIVE | NUMERIC_SIZE_1 | RESET_REQUIRED,
        option text = STRING_TOKEN(STR_BOTTOM), value = NEW_DEVICE_HIERARCHY_BOTTOM, flags = 0;
        option text = STRING_TOKEN(STR_TOP),  value = NEW_DEVICE_HIERARCHY_TOP, flags = 0;
    endoneof;

  endform;

  //
  // Form for Boot Config
  //
  form formid = MEMORY_TEST_FORM_ID,
    title = STRING_TOKEN(STR_MEMORY_TEST_FORM_TITLE);

    subtitle text = STRING_TOKEN(STR_NULL);

    oneof varid = MemoryTestControl.TestLevel,
        questionid = KEY_MEMORY_TEST_LEVEL,
        prompt = STRING_TOKEN(STR_MEMORY_TEST_LEVEL_PROMPT),
        help   = STRING_TOKEN(STR_MEMORY_TEST_LEVEL_HELP),
        flags  = INTERACTIVE | NUMERIC_SIZE_1,
        option text = STRING_TOKEN(STR_IGNORE), value = MEMORY_TEST_LEVEL_IGNORE, flags = 0;
        option text = STRING_TOKEN(STR_QUICK),  value = MEMORY_TEST_LEVEL_QUICK, flags = 0;
        option text = STRING_TOKEN(STR_SPARSE),  value = MEMORY_TEST_LEVEL_SPARSE, flags = 0;
        option text = STRING_TOKEN(STR_EXTENSIVE),  value = MEMORY_TEST_LEVEL_EXTENSIVE , flags = 0;
    endoneof;

    checkbox varid = MemoryTestControl.NextBoot,
        prompt = STRING_TOKEN(STR_MEMORY_TEST_NEXT_BOOT_PROMPT),
        help   = STRING_TOKEN(STR_MEMORY_TEST_NEXT_BOOT_HELP),
        default = FALSE,
    endcheckbox;

    checkbox varid = MemoryTestControl.SingleBoot,
        prompt = STRING_TOKEN(STR_MEMORY_TEST_SINGLE_BOOT_PROMPT),
        help   = STRING_TOKEN(STR_MEMORY_TEST_SINGLE_BOOT_HELP),
        default = FALSE,
    endcheckbox;

    numeric varid = MemoryTestControl.TestIterations,
        prompt = STRING_TOKEN(STR_MEMORY_TEST_ITERATIONS_PROMPT),
        help   = STRING_TOKEN(STR_MEMORY_TEST_ITERATIONS_HELP),
        flags = DISPLAY_UINT_DEC,
        minimum = 0,
        maximum = 255,
        step = 1,
        default = 1,
    endnumeric;

    checkbox varid = MemoryTestControl.Walking1BitEnabled,
        prompt = STRING_TOKEN(STR_MEMORY_TEST_WALKING_1_BIT_PROMPT),
        help   = STRING_TOKEN(STR_MEMORY_TEST_WALKING_1_BIT_HELP),
        default = FALSE,
    endcheckbox;
    checkbox varid = MemoryTestControl.AddressCheckEnabled,
        prompt = STRING_TOKEN(STR_MEMORY_TEST_ADDRESS_CHECK_PROMPT),
        help   = STRING_TOKEN(STR_MEMORY_TEST_ADDRESS_CHECK_HELP),
        default = FALSE,
    endcheckbox;
    checkbox varid = MemoryTestControl.MovingInversions01Enabled,
        prompt = STRING_TOKEN(STR_MEMORY_TEST_MOVING_INVERSIONS_01_PROMPT),
        help   = STRING_TOKEN(STR_MEMORY_TEST_MOVING_INVERSIONS_01_HELP),
        default = FALSE,
    endcheckbox;
    checkbox varid = MemoryTestControl.MovingInversions8BitEnabled,
        prompt = STRING_TOKEN(STR_MEMORY_TEST_MOVING_INVERSIONS_8BIT_PROMPT),
        help   = STRING_TOKEN(STR_MEMORY_TEST_MOVING_INVERSIONS_8BIT_HELP),
        default = FALSE,
    endcheckbox;
    checkbox varid = MemoryTestControl.MovingInversionsRandomEnabled,
        prompt = STRING_TOKEN(STR_MEMORY_TEST_MOVING_INVERSIONS_RANDOM_PROMPT),
        help   = STRING_TOKEN(STR_MEMORY_TEST_MOVING_INVERSIONS_RANDOM_HELP),
        default = FALSE,
    endcheckbox;
//    checkbox varid = MemoryTestControl.BlockMoveEnabled,
//        prompt = STRING_TOKEN(STR_MEMORY_TEST_BLOCK_MOVE_PROMPT),
//        help   = STRING_TOKEN(STR_MEMORY_TEST_BLOCK_MOVE_HELP),
//        default = FALSE,
//    endcheckbox;
    checkbox varid = MemoryTestControl.MovingInversions64BitEnabled,
        prompt = STRING_TOKEN(STR_MEMORY_TEST_MOVING_INVERSIONS_64BIT_PROMPT),
        help   = STRING_TOKEN(STR_MEMORY_TEST_MOVING_INVERSIONS_64BIT_HELP),
        default = FALSE,
    endcheckbox;
    checkbox varid = MemoryTestControl.RandomNumberSequenceEnabled,
        prompt = STRING_TOKEN(STR_MEMORY_TEST_RANDOM_NUMBER_SEQUENCE_PROMPT),
        help   = STRING_TOKEN(STR_MEMORY_TEST_RANDOM_NUMBER_SEQUENCE_HELP),
        default = FALSE,
    endcheckbox;
    checkbox varid = MemoryTestControl.Modulo20RandomEnabled,
        prompt = STRING_TOKEN(STR_MEMORY_TEST_MODULO20_RANDOM_PROMPT),
        help   = STRING_TOKEN(STR_MEMORY_TEST_MODULO20_RANDOM_HELP),
        default = FALSE,
    endcheckbox;
    checkbox varid = MemoryTestControl.BitFadeEnabled,
        prompt = STRING_TOKEN(STR_MEMORY_TEST_BIT_FADE_PROMPT),
        help   = STRING_TOKEN(STR_MEMORY_TEST_BIT_FADE_HELP),
        default = FALSE,
    endcheckbox;
    grayoutif ideqval MemoryTestControl.BitFadeEnabled == 0;
      numeric varid = MemoryTestControl.BitFadePattern,
          prompt = STRING_TOKEN(STR_MEMORY_TEST_BIT_FADE_PATTERN_PROMPT),
          help   = STRING_TOKEN(STR_MEMORY_TEST_BIT_FADE_PATTERN_HELP),
          flags = DISPLAY_UINT_HEX,
          minimum = 0,
          maximum = 0xFFFFFFFFFFFFFFFF,
          step = 1,
          default = 0xFFFFFFFFFFFFFFFF,
      endnumeric;
      numeric varid = MemoryTestControl.BitFadeWait,
          prompt = STRING_TOKEN(STR_MEMORY_TEST_BIT_FADE_DELAY_PROMPT),
          help   = STRING_TOKEN(STR_MEMORY_TEST_BIT_FADE_DELAY_HELP),
          flags = DISPLAY_UINT_DEC,
          minimum = 0,
          maximum = 0xFFFFFFFFFFFFFFFF,
          step = 1,
          default = 60000,
      endnumeric;
    endif;
  endform;

  //
  // Form for L4T configuration
  //
  form formid = L4T_CONFIGURATION_FORM_ID,
    title = STRING_TOKEN(STR_L4T_CONFIG_FORM_TITLE);

    subtitle text = STRING_TOKEN(STR_NULL);

        string  varid   = KernelCommandLine.KernelCommand,
            questionid = KEY_KERNEL_CMDLINE,
            prompt  = STRING_TOKEN(STR_KERNEL_CMDLINE_PROMPT),
            help    = STRING_TOKEN(STR_KERNEL_CMDLINE_HELP),
            flags   = INTERACTIVE | RESET_REQUIRED,
            minsize = KERNEL_CMD_STR_MIN_SIZE,
            maxsize = KERNEL_CMD_STR_MAX_SIZE,
    endstring;

    oneof varid = RootfsStatusSlotA.Status,
        questionid = KEY_OS_CHAIN_STATUS_A,
        prompt = STRING_TOKEN(STR_OS_STATUS_A_PROMPT),
        help   = STRING_TOKEN(STR_OS_STATUS_A_HELP),
        flags  = INTERACTIVE | NUMERIC_SIZE_4,
        option text = STRING_TOKEN(STR_OS_STATUS_DEFAULT), value = NVIDIA_OS_STATUS_NORMAL, flags = 0;
        option text = STRING_TOKEN(STR_OS_STATUS_UNBOOTABLE), value = NVIDIA_OS_STATUS_UNBOOTABLE, flags = 0;
    endoneof;

    suppressif NOT ideqval NVIDIA_CONFIG_HII_CONTROL.RootfsRedundancyLevel == NVIDIA_OS_REDUNDANCY_BOOT_ROOTFS;
        oneof varid = RootfsStatusSlotB.Status,
            questionid = KEY_OS_CHAIN_STATUS_B,
            prompt = STRING_TOKEN(STR_OS_STATUS_B_PROMPT),
            help   = STRING_TOKEN(STR_OS_STATUS_B_HELP),
            flags  = INTERACTIVE | NUMERIC_SIZE_4,
            option text = STRING_TOKEN(STR_OS_STATUS_DEFAULT), value = NVIDIA_OS_STATUS_NORMAL, flags = 0;
            option text = STRING_TOKEN(STR_OS_STATUS_UNBOOTABLE), value = NVIDIA_OS_STATUS_UNBOOTABLE, flags = 0;
        endoneof;
    endif;

    oneof varid = L4TDefaultBootMode.BootMode,
        questionid = KEY_L4T_BOOTMODE_DEFAULT,
        prompt = STRING_TOKEN(STR_L4T_BOOTMODE_PROMPT),
        help   = STRING_TOKEN(STR_L4T_BOOTMODE_HELP),
        flags  = INTERACTIVE | NUMERIC_SIZE_4,
        option text = STRING_TOKEN(STR_L4T_BOOTMODE_DEFAULT), value = NVIDIA_L4T_BOOTMODE_DEFAULT, flags = 0;
        option text = STRING_TOKEN(STR_L4T_BOOTMODE_GRUB), value = NVIDIA_L4T_BOOTMODE_GRUB, flags = 0;
        option text = STRING_TOKEN(STR_L4T_BOOTMODE_DIRECT), value = NVIDIA_L4T_BOOTMODE_DIRECT, flags = 0;
        option text = STRING_TOKEN(STR_L4T_BOOTMODE_BOOTIMG), value = NVIDIA_L4T_BOOTMODE_BOOTIMG, flags = 0;
        option text = STRING_TOKEN(STR_L4T_BOOTMODE_RECOVERY), value = NVIDIA_L4T_BOOTMODE_RECOVERY, flags = 0;
    endoneof;

    oneof varid = DgpuDtEfifbSupport.Enabled,
        questionid = KEY_DGPU_DT_EFIFB_SUPPORT,
        prompt = STRING_TOKEN(STR_DT_DGPU_EFIFB_PROMPT),
        help   = STRING_TOKEN(STR_DT_DGPU_EFIFB_HELP),
        flags  = INTERACTIVE | NUMERIC_SIZE_1 | RESET_REQUIRED,
        option text = STRING_TOKEN(STR_DISABLED), value = DGPU_DT_EFIFB_DISABLE, flags = 0;
        option text = STRING_TOKEN(STR_ENABLED),  value = DGPU_DT_EFIFB_ENABLE, flags = 0;
    endoneof;
  endform;

  //
  // Form for Enable PCIe in OS
  //
  form formid = PCIE_CONFIGURATION_FORM_ID,
    title = STRING_TOKEN(STR_PCIE_CONFIG_FORM_TITLE);

    subtitle text = STRING_TOKEN(STR_NULL);

    //
    // Display of Oneof: 'EnablePcieInOs'
    //
    suppressif ideqval PCIeInOsConfig.ConfigEnabled == 0;
    oneof varid = EnablePcieInOS.Enabled,
        questionid = KEY_ENABLE_PCIE_IN_OS_CONFIG,
        prompt = STRING_TOKEN(STR_PCIE_IN_OS_PROMPT),
        help   = STRING_TOKEN(STR_PCIE_IN_OS_HELP),
        flags  = INTERACTIVE | NUMERIC_SIZE_1 | RESET_REQUIRED,
        option text = STRING_TOKEN(STR_DISABLED), value = PCIE_IN_OS_DISABLE, flags = 0;
        option text = STRING_TOKEN(STR_ENABLED),  value = PCIE_IN_OS_ENABLE, flags = 0;
    endoneof;
    endif;

  endform;

endformset;
