/** @file
*
*  NVIDIA Config formset.
*
*  Copyright (c) 2020-2023, NVIDIA CORPORATION & AFFILIATES. All rights reserved.
*  Copyright (c) 2017, Linaro, Ltd. All rights reserved.
*
*  SPDX-License-Identifier: BSD-2-Clause-Patent
*
**/

#include <Uefi/UefiMultiPhase.h>
#include "NvidiaConfigHii.h"

formset
  guid      = NVIDIA_CONFIG_FORMSET_GUID,
  title     = STRING_TOKEN(STR_NVIDIA_CONFIG_TITLE),
  help      = STRING_TOKEN(STR_NVIDIA_CONFIG_HELP),

  varstore NVIDIA_CONFIG_HII_CONTROL,
    varid = NVIDIA_CONFIG_HII_CONTROL_ID,
    name = NVIDIA_CONFIG_HII_CONTROL,
    guid = NVIDIA_CONFIG_FORMSET_GUID;

  efivarstore NvidiaPcieEnableVariable,
    attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_NON_VOLATILE,  // EFI variable attributes
    name  = EnablePcieInOS,
    guid  = NVIDIA_TOKEN_SPACE_GUID;

  efivarstore NvidiaPcieResourceConfiguration,
    attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS,  // EFI variable attributes
    name  = PCIeResourceConfig,
    guid  = NVIDIA_TOKEN_SPACE_GUID;

  efivarstore NvidiaPcieEnableInOsConfiguration,
    attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS,  // EFI variable attributes
    name  = PCIeInOsConfig,
    guid  = NVIDIA_TOKEN_SPACE_GUID;

  efivarstore NVIDIA_QUICK_BOOT_ENABLED,
    attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_NON_VOLATILE,  // EFI variable attributes
    name  = QuickBootEnabled,
    guid  = NVIDIA_PUBLIC_VARIABLE_GUID;

  efivarstore NVIDIA_NEW_DEVICE_HIERARCHY,
    attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_NON_VOLATILE,  // EFI variable attributes
    name  = NewDeviceHierarchy,
    guid  = NVIDIA_PUBLIC_VARIABLE_GUID;

  efivarstore NVIDIA_SERIAL_TYPE_CONFIG,
    attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS,  // EFI variable attributes
    name  = SerialTypeConfig,
    guid  = NVIDIA_TOKEN_SPACE_GUID;

  efivarstore NVIDIA_SERIAL_PORT_CONFIG,
    attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_NON_VOLATILE,  // EFI variable attributes
    name  = SerialPortConfig,
    guid  = NVIDIA_TOKEN_SPACE_GUID;

  efivarstore NVIDIA_KERNEL_COMMAND_LINE,
    attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_NON_VOLATILE,  // EFI variable attributes
    name  = KernelCommandLine,
    guid  = NVIDIA_PUBLIC_VARIABLE_GUID;

  efivarstore NVIDIA_OS_STATUS_A,
    attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_NON_VOLATILE | EFI_VARIABLE_RUNTIME_ACCESS,  // EFI variable attributes
    name  = RootfsStatusSlotA,
    guid  = NVIDIA_PUBLIC_VARIABLE_GUID;

  efivarstore NVIDIA_OS_STATUS_B,
    attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_NON_VOLATILE | EFI_VARIABLE_RUNTIME_ACCESS,  // EFI variable attributes
    name  = RootfsStatusSlotB,
    guid  = NVIDIA_PUBLIC_VARIABLE_GUID;

  efivarstore NVIDIA_L4T_BOOT_MODE,
    attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_NON_VOLATILE | EFI_VARIABLE_RUNTIME_ACCESS,  // EFI variable attributes
    name  = L4TDefaultBootMode,
    guid  = NVIDIA_PUBLIC_VARIABLE_GUID;

  efivarstore NVIDIA_IPMI_NETWORK_BOOT_MODE,
    attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_NON_VOLATILE | EFI_VARIABLE_RUNTIME_ACCESS,
    name  = IpmiNetworkBootMode,
    guid  = NVIDIA_PUBLIC_VARIABLE_GUID;

  efivarstore NVIDIA_ACPI_TIMER_ENABLED,
    attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_NON_VOLATILE,  // EFI variable attributes
    name  = AcpiTimerEnabled,
    guid  = NVIDIA_PUBLIC_VARIABLE_GUID;

  efivarstore NVIDIA_DGPU_DT_EFIFB_SUPPORT,
    attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_NON_VOLATILE | EFI_VARIABLE_RUNTIME_ACCESS,  // EFI variable attributes
    name  = DgpuDtEfifbSupport,
    guid  = NVIDIA_PUBLIC_VARIABLE_GUID;

  //
  // Main form for NVIDIA Configuration
  //
  form formid = NVIDIA_CONFIG_FORM_ID,
    title = STRING_TOKEN(STR_NVIDIA_CONFIG_TITLE);

    subtitle text = STRING_TOKEN(STR_NULL);

    oneof varid = SerialPortConfig.Configuration,
        questionid = KEY_SERIAL_PORT_CONFIG,
        prompt = STRING_TOKEN(STR_SERIAL_PORT_CONFIG_PROMPT),
        help   = STRING_TOKEN(STR_SERIAL_PORT_CONFIG_HELP),
        flags  = INTERACTIVE | NUMERIC_SIZE_1 | RESET_REQUIRED,
        option text = STRING_TOKEN(STR_SP_DISABLED), value = NVIDIA_SERIAL_PORT_DISABLED, flags = 0;
        suppressif NOT ideqval NVIDIA_SERIAL_TYPE_CONFIG.Type == NVIDIA_SERIAL_PORT_TYPE_16550;
            option text = STRING_TOKEN(STR_SP_ENABLED_SPCR_FULL_16550), value = NVIDIA_SERIAL_PORT_SPCR_FULL_16550, flags = 0;
            option text = STRING_TOKEN(STR_SP_ENABLED_SPCR_NVIDIA_16550), value = NVIDIA_SERIAL_PORT_SPCR_NVIDIA_16550, flags = 0;
            option text = STRING_TOKEN(STR_SP_ENABLED_DBG2_NVIDIA_16550), value = NVIDIA_SERIAL_PORT_DBG2_NVIDIA_16550, flags = 0;
        endif;
        suppressif NOT ideqval NVIDIA_SERIAL_TYPE_CONFIG.Type == NVIDIA_SERIAL_PORT_TYPE_SBSA;
            option text = STRING_TOKEN(STR_SP_ENABLED_SPCR_SBSA), value = NVIDIA_SERIAL_PORT_SPCR_SBSA, flags = 0;
            option text = STRING_TOKEN(STR_SP_ENABLED_DBG2_SBSA), value = NVIDIA_SERIAL_PORT_DBG2_SBSA, flags = 0;
        endif;
    endoneof;
    //
    // Display Enable PCIe in OS
    //
    suppressif ideqval PCIeResourceConfig.ConfigEnabled == 0;
    goto PCIE_CONFIGURATION_FORM_ID,
        prompt = STRING_TOKEN(STR_PCIE_CONFIG_FORM_TITLE),
        help   = STRING_TOKEN(STR_PCIE_CONFIG_FORM_HELP),
        flags  = INTERACTIVE,
        key    = KEY_ENABLE_PCIE_CONFIG;
    endif;

    suppressif ideqval NVIDIA_CONFIG_HII_CONTROL.L4TSupported == 0;
    goto L4T_CONFIGURATION_FORM_ID,
        prompt = STRING_TOKEN(STR_L4T_CONFIG_FORM_TITLE),
        help   = STRING_TOKEN(STR_L4T_CONFIG_FORM_HELP),
        flags  = INTERACTIVE,
        key    = KEY_L4T_CONFIG;
    endif;

    goto BOOT_CONFIGURATION_FORM_ID,
        prompt = STRING_TOKEN(STR_BOOT_CONFIG_FORM_TITLE),
        help   = STRING_TOKEN(STR_BOOT_CONFIG_FORM_HELP),
        flags  = INTERACTIVE,
        key    = KEY_BOOT_CONFIG;

    suppressif ideqval NVIDIA_CONFIG_HII_CONTROL.TH500Config == 0;
    goto TH500_CONFIGURATION_FORM_ID,
        prompt = STRING_TOKEN(STR_TH500_CONFIG_FORM_TITLE),
        help   = STRING_TOKEN(STR_TH500_CONFIG_FORM_HELP);
    endif;

    suppressif ideqval NVIDIA_CONFIG_HII_CONTROL.DebugMenuSupported == 0;
    goto DEBUG_CONFIGURATION_FORM_ID,
        prompt = STRING_TOKEN(STR_DEBUG_CONFIG_FORM_TITLE),
        help   = STRING_TOKEN(STR_DEBUG_CONFIG_FORM_HELP);
    endif;

    text
      help   = STRING_TOKEN(STR_RESET_VARIABLES_HELP),
      text   = STRING_TOKEN(STR_RESET_VARIABLES_PROMPT),
      flags  = INTERACTIVE | RESET_REQUIRED,
      key    = KEY_RESET_VARIABLES;
    //
    // TODO... for more form ids
    //
  endform;
  //
  // Form for Boot Config
  //
  form formid = BOOT_CONFIGURATION_FORM_ID,
    title = STRING_TOKEN(STR_BOOT_CONFIG_FORM_TITLE);

    subtitle text = STRING_TOKEN(STR_NULL);

    suppressif ideqval NVIDIA_CONFIG_HII_CONTROL.QuickBootSupported == 0;
    oneof varid = QuickBootEnabled.Enabled,
        questionid = KEY_ENABLE_QUICK_BOOT,
        prompt = STRING_TOKEN(STR_QUICK_BOOT_ENABLED_PROMPT),
        help   = STRING_TOKEN(STR_QUICK_BOOT_ENABLED_HELP),
        flags  = INTERACTIVE | NUMERIC_SIZE_1 | RESET_REQUIRED,
        option text = STRING_TOKEN(STR_DISABLED), value = QUICK_BOOT_DISABLE, flags = 0;
        option text = STRING_TOKEN(STR_ENABLED),  value = QUICK_BOOT_ENABLE, flags = 0;
    endoneof;
    endif;

    oneof varid = NewDeviceHierarchy.Hierarchy,
        questionid = KEY_NEW_DEVICE_HIERARCHY,
        prompt = STRING_TOKEN(STR_NEW_DEVICE_HIERARCHY_PROMPT),
        help   = STRING_TOKEN(STR_NEW_DEVICE_HIERARCHY_HELP),
        flags  = INTERACTIVE | NUMERIC_SIZE_1 | RESET_REQUIRED,
        option text = STRING_TOKEN(STR_BOTTOM), value = NEW_DEVICE_HIERARCHY_BOTTOM, flags = 0;
        option text = STRING_TOKEN(STR_TOP),  value = NEW_DEVICE_HIERARCHY_TOP, flags = 0;
    endoneof;

    oneof varid = IpmiNetworkBootMode.IpMode,
        questionid = KEY_IPMI_NETWORK_BOOT_MODE,
        prompt = STRING_TOKEN(STR_IPMI_NETWORK_BOOT_MODE_PROMPT),
        help   = STRING_TOKEN(STR_IPMI_NETWORK_BOOT_MODE_HELP),
        flags  = INTERACTIVE | NUMERIC_SIZE_1 | RESET_REQUIRED,
        option text = STRING_TOKEN(STR_IPV4), value = IPMI_NETWORK_BOOT_MODE_IPV4, flags = 0;
        option text = STRING_TOKEN(STR_IPV6), value = IPMI_NETWORK_BOOT_MODE_IPV6, flags = 0;
    endoneof;

    oneof varid = AcpiTimerEnabled.Enabled,
        questionid = KEY_ENABLE_ACPI_TIMER,
        prompt = STRING_TOKEN(STR_ACPI_TIMER_ENABLED_PROMPT),
        help   = STRING_TOKEN(STR_ACPI_TIMER_ENABLED_HELP),
        flags  = INTERACTIVE | NUMERIC_SIZE_1 | RESET_REQUIRED,
        option text = STRING_TOKEN(STR_DISABLED), value = ACPI_TIMER_DISABLE, flags = 0;
        option text = STRING_TOKEN(STR_ENABLED),  value = ACPI_TIMER_ENABLE, flags = 0;
    endoneof;
  endform;

  //
  // Form for L4T configuration
  //
  form formid = L4T_CONFIGURATION_FORM_ID,
    title = STRING_TOKEN(STR_L4T_CONFIG_FORM_TITLE);

    suppressif ideqval NVIDIA_CONFIG_HII_CONTROL.L4TSupported == 0;

      subtitle text = STRING_TOKEN(STR_NULL);

          string  varid   = KernelCommandLine.KernelCommand,
              questionid = KEY_KERNEL_CMDLINE,
              prompt  = STRING_TOKEN(STR_KERNEL_CMDLINE_PROMPT),
              help    = STRING_TOKEN(STR_KERNEL_CMDLINE_HELP),
              flags   = INTERACTIVE | RESET_REQUIRED,
              minsize = KERNEL_CMD_STR_MIN_SIZE,
              maxsize = KERNEL_CMD_STR_MAX_SIZE,
      endstring;

      oneof varid = RootfsStatusSlotA.Status,
          questionid = KEY_OS_CHAIN_STATUS_A,
          prompt = STRING_TOKEN(STR_OS_STATUS_A_PROMPT),
          help   = STRING_TOKEN(STR_OS_STATUS_A_HELP),
          flags  = INTERACTIVE | NUMERIC_SIZE_4,
          option text = STRING_TOKEN(STR_OS_STATUS_DEFAULT), value = NVIDIA_OS_STATUS_NORMAL, flags = 0;
          option text = STRING_TOKEN(STR_OS_STATUS_UNBOOTABLE), value = NVIDIA_OS_STATUS_UNBOOTABLE, flags = 0;
      endoneof;

      suppressif NOT ideqval NVIDIA_CONFIG_HII_CONTROL.RootfsRedundancyLevel == NVIDIA_OS_REDUNDANCY_BOOT_ROOTFS;
          oneof varid = RootfsStatusSlotB.Status,
              questionid = KEY_OS_CHAIN_STATUS_B,
              prompt = STRING_TOKEN(STR_OS_STATUS_B_PROMPT),
              help   = STRING_TOKEN(STR_OS_STATUS_B_HELP),
              flags  = INTERACTIVE | NUMERIC_SIZE_4,
              option text = STRING_TOKEN(STR_OS_STATUS_DEFAULT), value = NVIDIA_OS_STATUS_NORMAL, flags = 0;
              option text = STRING_TOKEN(STR_OS_STATUS_UNBOOTABLE), value = NVIDIA_OS_STATUS_UNBOOTABLE, flags = 0;
          endoneof;
      endif;

      oneof varid = L4TDefaultBootMode.BootMode,
          questionid = KEY_L4T_BOOTMODE_DEFAULT,
          prompt = STRING_TOKEN(STR_L4T_BOOTMODE_PROMPT),
          help   = STRING_TOKEN(STR_L4T_BOOTMODE_HELP),
          flags  = INTERACTIVE | NUMERIC_SIZE_4,
          option text = STRING_TOKEN(STR_L4T_BOOTMODE_DEFAULT), value = NVIDIA_L4T_BOOTMODE_DEFAULT, flags = 0;
          option text = STRING_TOKEN(STR_L4T_BOOTMODE_GRUB), value = NVIDIA_L4T_BOOTMODE_GRUB, flags = 0;
          option text = STRING_TOKEN(STR_L4T_BOOTMODE_DIRECT), value = NVIDIA_L4T_BOOTMODE_DIRECT, flags = 0;
          option text = STRING_TOKEN(STR_L4T_BOOTMODE_BOOTIMG), value = NVIDIA_L4T_BOOTMODE_BOOTIMG, flags = 0;
          option text = STRING_TOKEN(STR_L4T_BOOTMODE_RECOVERY), value = NVIDIA_L4T_BOOTMODE_RECOVERY, flags = 0;
      endoneof;

      oneof varid = DgpuDtEfifbSupport.Enabled,
        questionid = KEY_DGPU_DT_EFIFB_SUPPORT,
        prompt = STRING_TOKEN(STR_DT_DGPU_EFIFB_PROMPT),
        help   = STRING_TOKEN(STR_DT_DGPU_EFIFB_HELP),
        flags  = INTERACTIVE | NUMERIC_SIZE_1 | RESET_REQUIRED,
        option text = STRING_TOKEN(STR_DISABLED), value = DGPU_DT_EFIFB_DISABLE, flags = 0;
        option text = STRING_TOKEN(STR_ENABLED),  value = DGPU_DT_EFIFB_ENABLE, flags = 0;
      endoneof;
    endif; // suppressif ideqval NVIDIA_CONFIG_HII_CONTROL.L4TSupported == 0;
  endform;

  //
  // Form for Enable PCIe in OS
  //
  form formid = PCIE_CONFIGURATION_FORM_ID,
    title = STRING_TOKEN(STR_PCIE_CONFIG_FORM_TITLE);

    subtitle text = STRING_TOKEN(STR_NULL);

    //
    // Display of Oneof: 'EnablePcieInOs'
    //
    suppressif ideqval PCIeInOsConfig.ConfigEnabled == 0;
    oneof varid = EnablePcieInOS.Enabled,
        questionid = KEY_ENABLE_PCIE_IN_OS_CONFIG,
        prompt = STRING_TOKEN(STR_PCIE_IN_OS_PROMPT),
        help   = STRING_TOKEN(STR_PCIE_IN_OS_HELP),
        flags  = INTERACTIVE | NUMERIC_SIZE_1 | RESET_REQUIRED,
        option text = STRING_TOKEN(STR_DISABLED), value = PCIE_IN_OS_DISABLE, flags = 0;
        option text = STRING_TOKEN(STR_ENABLED),  value = PCIE_IN_OS_ENABLE, flags = 0;
    endoneof;
    endif;

  endform;

  form formid = TH500_CONFIGURATION_FORM_ID,
    title = STRING_TOKEN(STR_TH500_CONFIG_FORM_TITLE);
    subtitle text = STRING_TOKEN(STR_NULL);

    checkbox varid = NVIDIA_CONFIG_HII_CONTROL.EgmEnabled,
        prompt = STRING_TOKEN(STR_EGM_ENABLE_PROMPT),
        help   = STRING_TOKEN(STR_EGM_ENABLE_HELP),
        flags  = RESET_REQUIRED,
        default = FALSE,
    endcheckbox;

    grayoutif ideqval NVIDIA_CONFIG_HII_CONTROL.EgmEnabled == 0;
    numeric varid = NVIDIA_CONFIG_HII_CONTROL.EgmHvSizeMb,
        prompt = STRING_TOKEN(STR_EGM_HV_RESERVED_SIZE_PROMPT),
        help   = STRING_TOKEN(STR_EGM_HV_RESERVED_SIZE_HELP),
        flags = RESET_REQUIRED | DISPLAY_UINT_DEC,
        minimum = 0,
        maximum = 4294967295,
        step = 64,
        default = 0,
    endnumeric;

    checkbox varid = NVIDIA_CONFIG_HII_CONTROL.SpreadSpectrumEnable,
        prompt = STRING_TOKEN(STR_SPREAD_SPECTRUM_PROMPT),
        help   = STRING_TOKEN(STR_SPREAD_SPECTRUM_HELP),
        flags  = RESET_REQUIRED,
        default = FALSE,
    endcheckbox;

    endif;

    ADD_GOTO_SOCKET_FORM(0)
    ADD_GOTO_SOCKET_FORM(1)
    ADD_GOTO_SOCKET_FORM(2)
    ADD_GOTO_SOCKET_FORM(3)

  endform;

  ADD_SOCKET_FORM(0)
  ADD_SOCKET_FORM(1)
  ADD_SOCKET_FORM(2)
  ADD_SOCKET_FORM(3)
  ADD_PCIE_FORM(0,0)
  ADD_PCIE_FORM(0,1)
  ADD_PCIE_FORM(0,2)
  ADD_PCIE_FORM(0,3)
  ADD_PCIE_FORM(0,4)
  ADD_PCIE_FORM(0,5)
  ADD_PCIE_FORM(0,6)
  ADD_PCIE_FORM(0,7)
  ADD_PCIE_FORM(0,8)
  ADD_PCIE_FORM(0,9)
  ADD_PCIE_FORM(1,0)
  ADD_PCIE_FORM(1,1)
  ADD_PCIE_FORM(1,2)
  ADD_PCIE_FORM(1,3)
  ADD_PCIE_FORM(1,4)
  ADD_PCIE_FORM(1,5)
  ADD_PCIE_FORM(1,6)
  ADD_PCIE_FORM(1,7)
  ADD_PCIE_FORM(1,8)
  ADD_PCIE_FORM(1,9)
  ADD_PCIE_FORM(2,0)
  ADD_PCIE_FORM(2,1)
  ADD_PCIE_FORM(2,2)
  ADD_PCIE_FORM(2,3)
  ADD_PCIE_FORM(2,4)
  ADD_PCIE_FORM(2,5)
  ADD_PCIE_FORM(2,6)
  ADD_PCIE_FORM(2,7)
  ADD_PCIE_FORM(2,8)
  ADD_PCIE_FORM(2,9)
  ADD_PCIE_FORM(3,0)
  ADD_PCIE_FORM(3,1)
  ADD_PCIE_FORM(3,2)
  ADD_PCIE_FORM(3,3)
  ADD_PCIE_FORM(3,4)
  ADD_PCIE_FORM(3,5)
  ADD_PCIE_FORM(3,6)
  ADD_PCIE_FORM(3,7)
  ADD_PCIE_FORM(3,8)
  ADD_PCIE_FORM(3,9)

  form formid = DEBUG_CONFIGURATION_FORM_ID,
    title = STRING_TOKEN(STR_DEBUG_CONFIG_FORM_TITLE);
    subtitle text = STRING_TOKEN(STR_NULL);
    suppressif ideqval NVIDIA_CONFIG_HII_CONTROL.DebugMenuSupported == 0;
      numeric varid = NVIDIA_CONFIG_HII_CONTROL.UefiDebugLevel,
          prompt = STRING_TOKEN(STR_UEFI_DEBUG_LEVEL_PROMPT),
          help   = STRING_TOKEN(STR_UEFI_DEBUG_LEVEL_HELP),
          flags = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum = 0,
          maximum = 4294967295,
          step = 1,
          default = 0,
      endnumeric;
    endif; // suppressif ideqval NVIDIA_CONFIG_HII_CONTROL.DebugMenuSupported == 0;
  endform;

endformset;
